一、数据模型分析
    1.每张表记录的数据内容
        分模块对每张表记录的信息进行了解
    2.每张表重要字段的设置
        非空字段和外键字段
    3.数据库级别表与表的关系
        外键关系
    4.表与表之间的业务关系
        在分析表与表之间的业务关系的时候 一定要建立在某种业务基础之上去分析

二、分析该项目中的四张表（用户订单模块）
    1.分析每张表记录的数据内容
        user表：记录了购买商品的用户信息
        orders表：记录了用户购买商品后生成的订单信息
        orderdetail表：记录了订单中购买商品的详细信息
        items表：记录了商品信息

    2.每张表重要字段的设置
        user表:主键
        orders表:
            user_id：关联用户id
        orderdetail表：
            orders_id：关联订单id
            items_id：关联商品id
        items表：主键

    3.数据库级别表与表之间的关系
        模型图

    4.表与表之间的业务关系（一定要建立在某种业务基础之上才能分析）
        user -> orders:一个用户可以下多个订单，（一对多）
        orders -> user:一个订单只能标识一个用户，（一对一）

        items -> orderdetail:一个商品可以存在多个订单明细中，（一对多）
        orderdetail -> items:一个订单明细中只能存在一个商品信息，（一对一）

        orders -> orderdetail:一个订单中可以存在多个订单明细，（一对多）
        orderdetail -> orders:一个订单明细只能在一个订单中，（一对一）

        user -> items:一个用户可以购买多个商品，（一对多）
        items -> user:一个商品可以被多个用户购买，（一对多）

三、一对一查询
    需求：查询订单信息，关联查询创建订单的用户信息
    1.采用 resultType 的方式
        1.1创建订单扩展类OrdersCustom,里面添加需要查找的用户的属性，并且条件toString() 方法
        1.2在 映射文件中常见 查询订单信息的 statement
        1.3在映射类中创建接口
        1.4测试代码

    2.采用 resultMap 的方式

四、一对多查询
    需求：查询订单及订单明细
    1.确定查询主表：orders,关联表：订单明细
    2.sql语句,如果使用resultType，测查询出来的结果出现大量的重复数据，所以采用resultMap来实现

五、多对多查询
    需求：查询用户及用户购买的商品信息
    1.查询主表：user,关联查询：orders,oderdetail,items
    2.sql语句
    3.将查询出来的结果集合映射到user中，user中包含订单order映射，order中包含orderdetail映射，在orderdetail中包含items映射

六、延迟加载
    定义：有时在多表查询的时候我们只需要查询单表（几张表）就能满足我们的需求，同时也有肯可能需要查询多表，此时我们就可以根据需求来
        执行查找信息，满足特定需求时采用延迟加载
    需求：查询订单信息，关联查询创建订单的用户信息，在不调用 Orders 类中的 getUser()方法的时候不实用延迟加载，调用时才使用延迟加载
    1.不使用延迟加载时sql：只查询订单信息
    2.使用延迟加载时sql：关联查询用户信息
    3.MyBaits默认没有开启延迟加载，需要在配置文件中配置延迟加载
        <settings/>中有两个配置，一个是全局，一个是懒加载

    4.注意：在MyBatis中配置文件中的内容配置是有一定的顺序的，
        properties/settings/typeAliases/typeHandlers/objectFactory/objectWrapperFactory/plugins/environments/databaseIdProvider/



